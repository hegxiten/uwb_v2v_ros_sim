<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
    <xacro:include filename="$(find turtlebot3_description)/urdf/common_properties.xacro"/>
    <xacro:macro name="link_macro" params="link_name visual_origin collision_origin geometry_size">
        <link name="${link_name}">
            <visual>
                <origin xyz="${visual_origin}" rpy="0 0 0"/>
                <geometry>
                    <box size="${geometry_size}"/>
                </geometry>
            </visual>
            <collision>
                <origin xyz="${collision_origin}" rpy="0 0 0"/>
                <geometry>
                    <box size="${geometry_size}"/>
                </geometry>
            </collision>
            <inertial>
                <mass value="0.05"/>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <inertia ixx="2.0833e-04" ixy="0" ixz="0" iyy="2.0833e-04" iyz="0" izz="8.3333e-05"/>
            </inertial>
            <dynamics damping="0.5" friction="1"/>
        </link>
    </xacro:macro>

    <!-- https://answers.gazebosim.org/question/1321/a-correct-way-to-implement-fixed-joint/?answer=1323#post-id-1323-->
    <xacro:macro name="joint_macro" params="parent child joint_origin">
        <joint name="${parent}_to_${child}" type="revolute">
            <origin xyz="${joint_origin}" rpy="0 0 0"/>
            <parent link="${parent}"/>
            <child link="${child}"/>
            <axis xyz="0 0 1"/>
            <limit upper="0" lower="0" effort="300" velocity="5"/>
        </joint>
    </xacro:macro>

    <xacro:macro name="uwb_link"
                 params="link_name visual_origin collision_origin geometry_size joint_origin parent_name">
        <xacro:link_macro link_name="${link_name}" visual_origin="${visual_origin}"
                          collision_origin="${collision_origin}" geometry_size="${geometry_size}"/>
        <xacro:joint_macro parent="${parent_name}" child="${link_name}" joint_origin="${joint_origin}"/>
    </xacro:macro>

    <xacro:macro name="A_end_virtual_frame" params="half_vehicle_length">
        <link name="A_end_virtual_frame">
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <box size="0 0 0"/>
                </geometry>
            </collision>
            <inertial>
                <mass value="0.05"/>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <inertia ixx="2.0833e-04" ixy="0" ixz="0" iyy="2.0833e-04" iyz="0" izz="8.3333e-05"/>
            </inertial>
            <dynamics damping="0.5" friction="1"/>
        </link>
        <joint name="A_end_virtual_frame_to_base_link" type="revolute">
            <parent link="base_link"/>
            <child link="A_end_virtual_frame"/>
            <origin xyz="0 -${half_vehicle_length} 0" rpy="0 0 0"/>
            <axis xyz="0 0 1"/>
            <limit upper="0" lower="0" effort="300" velocity="5"/>
        </joint>
    </xacro:macro>

    <xacro:macro name="B_end_virtual_frame" params="half_vehicle_length">
        <link name="B_end_virtual_frame">
            <collision>
                <origin xyz="0 0 0" rpy="0 0 3.14159"/>
                <geometry>
                    <box size="0 0 0"/>
                </geometry>
            </collision>
            <inertial>
                <mass value="0.05"/>
                <origin xyz="0 0 0" rpy="0 0 3.14159"/>
                <inertia ixx="2.0833e-04" ixy="0" ixz="0" iyy="2.0833e-04" iyz="0" izz="8.3333e-05"/>
            </inertial>
            <dynamics damping="0.5" friction="1"/>
        </link>
        <joint name="B_end_virtual_frame_to_base_link" type="revolute">
            <parent link="base_link"/>
            <child link="B_end_virtual_frame"/>
            <origin xyz="0 ${half_vehicle_length} 0" rpy="0 0 3.14159"/>
            <axis xyz="0 0 1"/>
            <limit upper="0" lower="0" effort="300" velocity="5"/>
        </joint>
    </xacro:macro>
</robot>
